name: CI/CD

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: ['main']

  push:
    branches: ['main']
    tags:
      - 'v*'

jobs:
  stylelint:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci

      - name: Stylelint
        run: |
          npm run stylelint

  prettier:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci

      - name: Prettier
        run: |
          npm run prettier

  eslint:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci

      - name: ESLint
        run: |
          npm run eslint

  # Creates a GitHub Release when the other two jobs succeeds, and only on pushes to tags.
  release:
    needs: [stylelint, prettier, eslint]

    permissions:
      contents: write

    if: needs.stylelint.result == 'success' && needs.prettier.result == 'success' && startsWith( github.ref, 'refs/tags/v' )

    runs-on: ubuntu-24.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci

      - uses: extractions/setup-just@v2
        with:
          just-version: 1.32.0

      - name: Get the version
        id: get_version
        run: |
          echo "${{ github.ref }}"
          echo "VERSION=$(echo $GITHUB_REF | sed 's/refs\/tags\///')" >> $GITHUB_ENV

      - name: Generate Release Title
        id: get_release_title
        shell: bash
        run: |
          export TODAY="($(TZ=Africa/Lusaka date --iso-8601=seconds))"
          echo "RELEASE_NAME=$VERSION $TODAY" >> $GITHUB_ENV

      - name: Extract Release Notes
        # This creates a file LATEST_RELEASE_NOTES.md in the parent directory (../)
        shell: bash
        run: |
          just release-notes

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.RELEASE_NAME }}
          body_path: ../LATEST_RELEASE_NOTES.md
